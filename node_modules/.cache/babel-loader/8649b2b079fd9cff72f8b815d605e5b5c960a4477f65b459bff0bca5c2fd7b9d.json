{"ast":null,"code":"var _jsxFileName = \"/Users/antoniaglatzel/Documents/Berkeley/Front_End_Dev/final/receiptforyourtime/src/InputOutputPage/DallE.js\",\n  _s = $RefreshSig$();\nimport { React, useContext, useState, useEffect } from 'react';\nimport { ItemContext } from '../App_Folder/App';\nimport { Configuration, OpenAIApi } from \"openai\";\nimport DallEReplacement from '../assets/dallEimage.png';\nimport { saveAs } from 'file-saver';\nimport { styled, useTheme, TextField } from '@mui/material';\nimport JSZip from \"jszip\";\nimport { imgSrcToBlob } from \"blob-util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DallE = _ref => {\n  _s();\n  let {} = _ref;\n  const theme = useTheme();\n  const {\n    appOpen,\n    setAppOpen,\n    //getting everything from the context\n    yourName,\n    setYourName,\n    yourMail,\n    setYourMail,\n    receiverName,\n    setReceiverName,\n    receiverMail,\n    setReceiverMail,\n    time,\n    setTime,\n    happy,\n    setHappy,\n    productive,\n    setProductive,\n    informative,\n    setInformative,\n    prompt,\n    setPrompt,\n    generatedImage,\n    setImage\n  } = useContext(ItemContext);\n  const [loading, setLoading] = useState(false);\n\n  //the openAI configuration based on our apiKey\n  //with the help of: https://www.youtube.com/watch?v=oacBV4tnuYQ\n  const conf = new Configuration({\n    apiKey: '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'\n    //process.env.REACT_APP_Open_AI_Key, //to hide it from the public\n  });\n\n  const oa = new OpenAIApi(conf);\n\n  //generation function \n  const generation = async () => {\n    if (prompt === \"\") {\n      console.log(\"just starting\");\n    } else {\n      setLoading(true);\n      const response = await oa.createImage({\n        prompt: prompt,\n        //exchange with state prompt later\n        n: 1,\n        size: \"256x256\"\n      });\n      setLoading(false); //to show that it is loading\n      const imageJson = response.data.data[0].b64_json; //trying to read the b64_json\n      console.log(\"actually generating\");\n      console.log(response.data);\n      console.log(response.data.data[0].url);\n      setImage(response.data.data[0].url); //return the url of the image  \n    }\n  };\n\n  useEffect(() => {\n    generation();\n  }, [prompt]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://media.tenor.com/I6kN-6X7nhAAAAAi/loading-buffering.gif\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"gI\",\n        src: generatedImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }, this);\n};\n_s(DallE, \"VXwOY8RKm0kde3V7q91soQzw4VA=\", false, function () {\n  return [useTheme];\n});\n_c = DallE;\nexport default DallE;\n\n//EFFORT TO DOWNLOAD THE IMAGE FROM DALL E API\n\n// 1 with file-save package \n\n//const downloadImage = (e) => {\n//   e.preventDefault();  \n//   saveAs(generatedImage, 'image.png') // Put your image url here.\n// }\n\n// 2 with blob-util package --> works on their homepage but not on the api (security warning)\n// source: https://github.com/Arrow7000/dall-e-downloader/blob/master/src/content-script.ts\n\n// async function downloadImagesAsZip(e) {\n//   // const images = document.querySelectorAll<HTMLImageElement>(\n//   //   \".task-page .generated-image > img\"\n//   // );\n\n//   // if (images.length <= 0) {\n//   //   throw new Error(\"No generated images found\");\n//   // }\n\n//   // const title = document\n//   //   .querySelector<HTMLInputElement>(\".image-prompt-input\")\n//   //   ?.value.trim();\n\n//   // if (title === undefined) {\n//   //   throw new Error(\n//   //     \"Cannot find the prompt input field so unable to generate a title for the download\"\n//   //   );\n//   // } else {\n//     e.preventDefault();  \n//   const imgUrls = [generatedImage];\n\n//     const folder = new JSZip();\n\n//     const blobsAndNames = await Promise.all(\n//       imgUrls.map((imgUrl, i) => {\n//         return imgSrcToBlob(imgUrl, \"image/png\", \"Anonymous\").then((blob) => {\n//           const name = `image.png`;\n//           return { name, blob };\n//         });\n//       })\n//     );\n\n//     blobsAndNames.forEach(({ blob, name }) => {\n//       folder.file(name, blob);\n//     });\n\n//     folder.generateAsync({ type: \"blob\" }).then((content) => {\n//       saveAs(content, \"images.zip\");\n//     });\n\n// }\nvar _c;\n$RefreshReg$(_c, \"DallE\");","map":{"version":3,"names":["React","useContext","useState","useEffect","ItemContext","Configuration","OpenAIApi","DallEReplacement","saveAs","styled","useTheme","TextField","JSZip","imgSrcToBlob","DallE","theme","appOpen","setAppOpen","yourName","setYourName","yourMail","setYourMail","receiverName","setReceiverName","receiverMail","setReceiverMail","time","setTime","happy","setHappy","productive","setProductive","informative","setInformative","prompt","setPrompt","generatedImage","setImage","loading","setLoading","conf","apiKey","oa","generation","console","log","response","createImage","n","size","imageJson","data","b64_json","url"],"sources":["/Users/antoniaglatzel/Documents/Berkeley/Front_End_Dev/final/receiptforyourtime/src/InputOutputPage/DallE.js"],"sourcesContent":["import { React, useContext, useState, useEffect } from 'react';\nimport { ItemContext } from '../App_Folder/App'\nimport { Configuration, OpenAIApi } from \"openai\";\nimport DallEReplacement from '../assets/dallEimage.png';\nimport { saveAs } from 'file-saver';\nimport { styled, useTheme, TextField } from '@mui/material';\nimport JSZip from \"jszip\";\nimport { imgSrcToBlob } from \"blob-util\";\n\nconst DallE = ({ }) => {\n\n  const theme = useTheme();\n\n  const { appOpen, setAppOpen,  //getting everything from the context\n    yourName, setYourName,\n    yourMail, setYourMail,\n    receiverName, setReceiverName,\n    receiverMail, setReceiverMail,\n    time, setTime,\n    happy, setHappy,\n    productive, setProductive,\n    informative, setInformative,\n    prompt, setPrompt,\n    generatedImage, setImage,\n  } = useContext(ItemContext);\n\n  const [loading, setLoading] = useState (false);\n\n  //the openAI configuration based on our apiKey\n  //with the help of: https://www.youtube.com/watch?v=oacBV4tnuYQ\n  const conf = new Configuration({\n    apiKey: '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'\n    //process.env.REACT_APP_Open_AI_Key, //to hide it from the public\n  });\n  const oa = new OpenAIApi(conf);\n\n  //generation function \n  const generation = async () => { \n    if (prompt === \"\") { console.log(\"just starting\") }\n    else {\n      setLoading(true);\n      const response = await oa.createImage({\n        prompt: prompt, //exchange with state prompt later\n        n: 1,\n        size: \"256x256\",\n      });\n      setLoading(false); //to show that it is loading\n      const imageJson = response.data.data[0].b64_json; //trying to read the b64_json\n      console.log(\"actually generating\")\n      console.log(response.data);\n      console.log(response.data.data[0].url);\n      setImage(response.data.data[0].url); //return the url of the image  \n    }\n  }\n\n    useEffect(() => {\n        generation();\n      }, [prompt]);\n      \n\n    return(     \n      <div>\n          {loading ? (\n\n            <div>\n              <img src=\"https://media.tenor.com/I6kN-6X7nhAAAAAi/loading-buffering.gif\"></img>\n            </div>\n          \n            ) : (\n        \n            <div>\n                <img id='gI' src={generatedImage}/>\n            </div>\n              \n          )}\n        </div>\n\n        \n        \n)\n}\n\nexport default DallE\n\n\n\n\n//EFFORT TO DOWNLOAD THE IMAGE FROM DALL E API\n\n// 1 with file-save package \n\n//const downloadImage = (e) => {\n  //   e.preventDefault();  \n  //   saveAs(generatedImage, 'image.png') // Put your image url here.\n  // }\n\n\n// 2 with blob-util package --> works on their homepage but not on the api (security warning)\n// source: https://github.com/Arrow7000/dall-e-downloader/blob/master/src/content-script.ts\n\n// async function downloadImagesAsZip(e) {\n      //   // const images = document.querySelectorAll<HTMLImageElement>(\n      //   //   \".task-page .generated-image > img\"\n      //   // );\n      \n      //   // if (images.length <= 0) {\n      //   //   throw new Error(\"No generated images found\");\n      //   // }\n      \n      //   // const title = document\n      //   //   .querySelector<HTMLInputElement>(\".image-prompt-input\")\n      //   //   ?.value.trim();\n      \n      //   // if (title === undefined) {\n      //   //   throw new Error(\n      //   //     \"Cannot find the prompt input field so unable to generate a title for the download\"\n      //   //   );\n      //   // } else {\n      //     e.preventDefault();  \n      //   const imgUrls = [generatedImage];\n      \n      //     const folder = new JSZip();\n      \n      //     const blobsAndNames = await Promise.all(\n      //       imgUrls.map((imgUrl, i) => {\n      //         return imgSrcToBlob(imgUrl, \"image/png\", \"Anonymous\").then((blob) => {\n      //           const name = `image.png`;\n      //           return { name, blob };\n      //         });\n      //       })\n      //     );\n      \n      //     blobsAndNames.forEach(({ blob, name }) => {\n      //       folder.file(name, blob);\n      //     });\n      \n      //     folder.generateAsync({ type: \"blob\" }).then((content) => {\n      //       saveAs(content, \"images.zip\");\n      //     });\n        \n      // }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}